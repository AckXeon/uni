##UML III

### Stereotypes
- stereotypes allow to extend the vocabulary of the UML so new model elements can be created and derived from existing ones
- stereotypes are for example: << boundary>> << control>> << entity>> << constructor>> << getter>> << setter>> << interface>> << extend>> << include>>
### 3 different types of objects
1) **entity objects**
  - Represent the persistent information tracked by the system (*application domain* objects)
  - notation: <img src="pics/entity.png" width="30">
2) **boundary objects**
  - represents the interaction between the user and the system
  - notation: <img src="pics/boundary.png" width="30">
3) **control objects**
  - represent the control tasks to be performed by the system
  - notation: <img src="pics/control.png" width="30">

### actor vs. class vs. object
- **actor**
  - any object outside the system, interacting with the system
- **class**
  - an abstraction modeling an entity in the application domain or in the solution domain
  - classes are part of the system
- **object**
  - an instance of a class

### Associations
- the multiplicity of associations denotes how many objects the instance of a class can reference
- types:
  - one to one association
  - one to many association
  - many to many association
- multiplicity 1 is default
- *qualifiers*
  - small rectangle containing the qualifier
  - used to reduce the multiplicity of an association
  - without / with qualification:
    <img src="pics/qualifier.png" width="300">

### Creating UML from written language
| Grammatical construct | UML model component | example|
|---|---|---|
|Proper noun|object|monopoly|
|improper noun|class|toy|
|doing verb|operation|buy, recommend|
|being verb|inheritance|is an|
|having verb|aggregation|has an|
|modal verb|constraint|must be|
|adjective|attribute|dangerous|
|transitive verb|operation|enter|
|intransitive verb|constraint, class, association|depends on|

- other knowledge sources:
  - application domain knowledge<br>
    end users and experts know the abstractions of the application domain
  - solution domain knowledge<br>
    abstractions in the solution domain
  - general world knowledge<br>
    your generic knowledge and intuition

### types of modeling
- functional modeling
  - describe the functionality of the system
  - the functional model is described with scenarios, use cases
  - purpose:
    - identification of functional requirements
    - delivery of new operations (methods) for the object model
- object modeling
  - describe the structure of the system
  - purpose:
    - identify the structure of the system
    - is the center of the modeling activities
- dynamic modeling
  - describe the dynamic behavior of the system
  - the dynamic model is described with
    - state diagrams
      - one state diagram per class with interesting dynamic behavior
    - sequence and communication diagrams
      - for the interaction between classes
  - purpose:
    - identification of new classes for the object model and identification of supply operations for the classes
- **modeling is iterative**
### identify classes and operations, objects

- identifications of classes and operations from the dynamic model
  - **sources for class identification**:
    - application domain analysis
      - find classes by talking to the client
      - find abstractions by observing the end user
    - general world knowledge and intuition
    - textual analysis (of event flow in use cases)
    - activities in state chart diagrams are candidates for public operations in classes
    - activity lines in sequence diagrams are candidates for objects
- **detecting operations**
  - look at the flow of events in a use case description
  - from the flow of events preceed to the sequence diagram to find the participating objects
- **Event**
  - something that happens at a point of time
  - sends information from one model to another
  - events can have associations with each other
    - casually related (happens before / after)
    - casually unrelated (happen concurrently)
  - can be grouped into event classes with a hierarchical structure (for example Java's exception hierarchy)
  - term "event" is used in two ways
    - instance of an event class ("update slide")
    - value of the attributes of an event class ("updated on 11:55")
- **finding the participating objects**
  - start with the flow of events
  - events always have a sender and receiver ( --> messages between two objects)
  - these are often the participating objects
