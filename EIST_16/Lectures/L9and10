
#### design metrics
##### cohesion and coupling measure interdependence
- *cohesion* measures interdependence of the elements in one subsystem
- *coupling* measures interdependence between different subsystems <br>

achieving **high cohesion and low coupling**:
| high cohesion | low coupling |
| --- | --- |
|Operations work on same data | Small interfaces |
| Operations implement a common abstraction or service | Information hiding |
| | No global data |
| | Interactions are mostly within the subsystem rather than across subsystem boundaries |


### 3) concurrency
- Used to address nonfunctional requirements such as: Performance, Response time, latency, availability
- Two objects are *inherently concurrent* if they can receive events at the same time without interacting
  - Good source for identification: Objects in a sequence diagram that are independent from each other
- Inherently concurrent objects can be assigned to separate threads of control
  - Objects with mutual exclusive activity can be folded into a single thread of control

#### thread of control
- a thread of control is a path through a set of state diagrams where only a single object is active at any time
  - a thread remains withing a state until the object sends an event to a second object, which then becomes active
  - *thread splitting*: object does a non-blocking send of an event to another object, so it does not wait
- concurrent threads can lead to *race conditions*

#### implementing concurrency
- physical concurrency
  - threads provided by hardware
- logical concurrency
  - Threads are provided by software (usually provided by threads packages)

- In both cases, - physical concurrency as well as logical concurrency - we have to solve the scheduling of the threads
- Concurrency introduces problems such as starvation, deadlocks, fairness

### 4) Hardware / software mapping
- this system design activity addresses two questions:
  - how to realize the subsystems, hard or software?
  - how will the object model be mapped onto the chosen hard / software

#### hardware software mapping difficulties
- much of the difficulty of designing a system comes from addressing externally-imposed constraints of hard / software
#### hardware software mapping in uml
- a *UML component* is a building block of the system.
  - It is represented as a rectangle with a tabbed rectangle symbol inside
- components have different lifetimes
  - eg. classes or associations only exist at design time
  - eg. source code or pointers exist at compile time
- The Hardware/Software Mapping addresses dependencies and distribution issues of UML components during system design

### 5) data management
- all classes of type entity in the system model need to be persistent
  - *Persistency:*: a class is persistent, if the values if their attributes have a lifetime beyond a single execution
- persistent classes are realized with:
  - file systems (if the data is used by multiple readers, but just a single writer at the same time)
  - database systems (if there are multiple concurrent readers and writers)

#### mapping an object model to a database
- UM models can be mapped to relational databases
  - some degradation appears, because all UML constructs have to be mapped onto a single relational database construct, the ***table***
- mapping of classes, attributes and associations
  - Each *class* is mapped to a *table*
  - Each *class attribute* is mapped onto a *column* in the table
  - An *instance* of a class represents a *row* in the table
  - A *many-to-many association* is mapped into its own *table*


### 6) global resource handling
- addresses access control
- describes access rights for different classes of actors

#### defining access control
- In multi-user systems different actors usually have different access rights to functions and data
- how are these access rights modeled?
  - During analysis we model access rights by associating use cases with the actors
  - During system design we model access rights by determining which objects are shared among actors
    - For this purpose we introduce the *access matrix*

#### access matrix
- An *access matrix* models the access of actors on classes
  - The *rows* of the matrix represents the *actors* of the system
  - The *column* represent *classes* whose access we want to control
- ***Access Right***: An entry in the access matrix. It lists the operations that can be executed by the actor on instances of the class

- access matrix implementations
  - ***global access table***
    - represents every non-empty cell in the matrix as a triple <actor, class, operation>
  - ***access control list***
    - Associates a list of (actor,operation) pairs with the class being accessed
    - Every time an instance of this class is accessed, the access list is checked for the corresponding actor and operation
  - ***capability***
    - associates a (class, operation) pair with a actor
    - A capability allows an actor to gain control access to an object of the class by calling one of the class operations described in the capability


## UML IV
### component diagram
- used to model the top-level view of the system design in terms of components and dependencies among the components
- The *dependencies* (edges in the graph) are the connectors are shown as dashed lines with arrows from the client component to the supplier component
  - The types of dependencies are implementation language specific
- there are two types of interfaces:
  - a *provided interface* is modeled using the lollipop notation   <img src="pics/lollypop.png" width="40">
  - a *required interface* is modeled using the socket notation   <img src="pics/socket.png" width="40">
- a *port* specifies a distinct interaction between the component and the environment
  - ports are depicted as small squared in the sides of classifiers

### deployment diagram
- Deployment diagrams are useful for showing a design after these system design decisions have been made
  - Subsystem decomposition
  - Concurrency
  - Hardware/Software Mapping
- a deployment diagram is a graph of nodes and connections
  - *nodes*: 3-D boxes
  - *connections*: solid lines between nodes
  - nodes may contain *components*
    - Components can be connected by “lollipops” and “sockets”
    - Components may contain objects (indicating that the object is part of the component)
